{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf400
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww15880\viewh16060\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \
Singleton Pattern\
\
1. In Python we use the __new__ class to help ensure there\'92s only one instance of a class\
2. When the __new__ class is called, it typically creates a new instances that class\
3. When we override it, we first check if our singleton instance has been created; if not, we create it using a super() call.\
\
class OneOnly:\
    _singleton = None\
    def __new__(cos, *args, **kwargs):\
    if not cls._singleton:\
    # THEN\
        cls._singleton = super(OneOnly, cis).__new__(cls, *args, **kwargs)\
    # ENDIF;\
    return cls._singleton\
\
# END OneOnly.\
\
\
\
>>> o1 = OneOnly()\
>>> o2 = OneOnly()\
>>> o1 == o2\
True\
>>> o1\
<__main__.OneOnly object at 0xb71c008c>\
>>> o2\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 <__main__.OneOnly object at 0xb71c008c>\
\
==========================================================================================\
\
- Singletons are a Design Pattern\
- Only one instance may exist at any given time\
\
Method 1\
\
class MySingleton(object):\
    _instance = None\
    def __new__(self):\
        if not self._instance:\
            self._instance = super(MySingleton, self).__new__(self)\
            self.y = 10\
     return self._instance\
\
x = MySingleton()\
print x.y\
x.y = 20\
z = MySingleton()\
print z.y\
\
\
Method 2 (using decorator)\
\
def singleton(myClass):\
    instances = \{\}\
    def getInstance(*args, **kwargs):\
        if myClass not in instances:\
            instances[myClass] = myClass(*args, **kwargs)\
        return instances[myClass]\
    return getInstance\
\
\
 @singleton\
class TestClass(object):\
    pass\
\
x = TestClass()}